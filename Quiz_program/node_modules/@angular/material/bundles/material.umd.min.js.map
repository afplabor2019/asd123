{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/outlet.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nclass MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n\n    if (animationMode === 'NoopAnimations') {\n      this.rippleConfig.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nconst _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnChanges, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  Inject,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nclass MatTabHeaderBase {}\nconst _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation) {\n      const trackedDiameters = MatProgressSpinner._diameters;\n      const diametersForElement = trackedDiameters.get(this._styleRoot);\n\n      if (!diametersForElement || !diametersForElement.has(this._diameter)) {\n        this._attachStyleNode();\n      }\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._styleRoot = _getShadowRoot(_elementRef.nativeElement, _document) || _document.head;\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleTag: HTMLStyleElement = this._document.createElement('style');\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n    styleTag.textContent = this._getAnimationText();\n    styleRoot.appendChild(styleTag);\n\n    if (!diametersForElement) {\n      diametersForElement = new Set<number>();\n      diameters.set(styleRoot, diametersForElement);\n    }\n\n    diametersForElement.add(currentDiameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color || (this.radioGroup && this.radioGroup.color) || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._resetMenu()\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    'aria-haspopup': 'dialog',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  private _document: Document;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          clearTimeout(this._closeFallbackTimeout);\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(event => {\n        // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has fired.\n        this._closeFallbackTimeout = setTimeout(() => {\n          this._overlayRef.dispose();\n        }, event.totalTime + 100);\n\n        this._overlayRef.detachBackdrop();\n      });\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.2');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","type","NgZone","ChangeDetectorRef","ViewportRuler","MatTabNav","propDecorators","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","MatTabLink","_tabNavBar","_elementRef","ngZone","platform","globalRippleOptions","tabIndex","_focusMonitor","animationMode","_this","_super","call","this","_tabLinkRipple","setupTriggerEvents","nativeElement","rippleConfig","parseInt","monitor","animation","enterDuration","exitDuration","get","_isActive","value","updateActiveLink","enumerable","configurable","disabled","stopMonitoring","decorators","Directive","args","exportAs","inputs","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","ANIMATION_MODULE_TYPE","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","selector","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","Component","template","styles","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","_node","ViewContainerRef","CDK_TREE_NODE_OUTLET_NODE","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","descendants","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","_renderData","MatTableDataSource","_filterData","filteredData","obj","filterPredicate","paginator","_updatePaginator","_orderData","sort","sortData","_pageData","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","_internalPageChanges","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","_animationMode","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","positions","inkBar","left","width","[class._mat-animation-noopable]","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","static","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","timer","_a","maxScrollDistance","distance","max","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatSortHeader","_renderArrow","_isDisabled","_isSorted","(click)","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","start","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","a","b","valueA","valueB","comparatorResult","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","sortChange","initialized","pageChange","page","dataStream","combineLatest","orderedData","paginatedData","MatSlider","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","_getDirection","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","vertical","top","size","posComponent","percent","_shouldInvertMouseCoords","exactValue","_calculateValue","closestValue","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_tickIntervalPercent","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","thumbLabel","displayWith","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","MatDrawer","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","mode","HostBinding","openedChange","_openedStream","openedStart","_closedStream","closedStart","onPositionChanged","opened","_animationStartListener","HostListener","_animationDoneListener","_element","backdropClick","_doCheckSubject","_validateDrawers","viewportRuler","updateContentMargins","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","drawer","_drawers","_isDrawerOpen","_start","_end","debounceTime","_contentMarginChanges","close","_left","_width","_right","_contentMargins","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","_isMinValue","axis","scale","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","MatProgressSpinner","_diameter","BASE_SIZE","_fallbackAnimation","trackedDiameters","_diameters","head","Set","_styleRoot","_getShadowRoot","_noopAnimations","_forceAnimations","diameter","strokeWidth","animationClass","diametersForElement","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","styleRoot","currentDiameter","diameters","setAttribute","_getAnimationText","appendChild","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","color","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanelWrap","transformPanel","MatFormFieldControl","MatSelect","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","overlayDir","CdkConnectedOverlay","options","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatSelectModule","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","panelOpen","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","MatListOption","_handleBlur","selectionList","_hasFocus","_setSelected","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_setOptionsFromValues","_i","item","disableRippleChanges","colorChanges","firstChange","_isDestroyed","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelHeader","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","_handleHeaderKeydown","_handleHeaderFocus","header","MAT_ACCORDION","hideToggle","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatCalendar","headerComponent","startAt","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","_animationsDisabled","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@.disabled]","(@expansionHeight.start)","[@expansionHeight]","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","yearsPerPage","isSameMultiYearView","_selectedYear","_todayYear","activeYear","minYearOfPage","getActiveOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","chipIndex","chips","chip","_chipBlurSubscription","chipBlurChanges","_blur","MatChipList","_listenToChipsRemoved","_chipRemoveSubscription","chipRemoveChanges","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","_hasFocusedChip","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_allowFocusEscape","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_closeFallbackTimeout","_result","dialogResult","detachBackdrop","totalTime","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_tabIndex","_userTabIndex","_chipInput","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_chipFocusSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","attribute","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","[attr.aria-haspopup]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","year1","dateAdapter","year2","startingYear","getStartingYear","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","rootNode","getRootNode","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}